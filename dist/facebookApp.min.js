"use strict";
var facebookApp = angular.module('facebookApp', []);
facebookApp.directive('socialFacebook', ["$rootScope", "Facebook", "$log", "FacebookEmitter", function($rootScope, Facebook, $log, FacebookEmitter) {
  return {
    scope: {'options': '=socialFacebook'},
    link: function(scope, el, attrs) {
      el.on('click', function() {
        scope.$apply(function() {
          scope[attrs.ngClick.replace(/\(\)|\;/g, '')]();
        });
      });
      scope.login = function() {
        Facebook.getLoginStatus().then(function(response) {
          FacebookEmitter.broadcast('login', true, response);
        }).catch(function(response) {
          $log.error(response.error);
          Facebook.login(scope.options).then(function(response) {
            FacebookEmitter.broadcast('login', true, response);
          }).catch(function(response) {
            $log.error(response.error);
            FacebookEmitter.broadcast('login', false, response);
          });
        });
      };
      scope.share = function() {
        Facebook.share({
          url: scope.options.url,
          method: scope.options.method,
          app_id: scope.options.app_id,
          name: scope.options.name,
          link: scope.options.link,
          redirect_uri: scope.options.redirect_uri,
          caption: scope.options.caption,
          description: scope.options.description,
          message: scope.options.message,
          display: scope.options.display
        }).then(function(response) {
          FacebookEmitter.broadcast('share', true, response);
        }).catch(function(response) {
          FacebookEmitter.broadcast('share', false, response);
        });
      };
      scope.logout = function() {
        Facebook.getLoginStatus().then(function() {
          Facebook.logout().then(function(response) {
            FacebookEmitter.broadcast('logout', true, response);
          }).catch(function(response) {
            FacebookEmitter.broadcast('logout', false, response);
          });
        }).catch(function(rootScope) {
          FacebookEmitter.broadcast('logout', true, response);
        });
      };
    }
  };
}]);
facebookApp.service('Facebook', ["$rootScope", "$q", "FacebookScriptLoader", "$log", "$timeout", function($rootScope, $q, FacebookScriptLoader, $log, $timeout) {
  this.getMe = function() {
    var getMeDeferred = $q.defer();
    FacebookScriptLoader.attach().then(function(fb) {
      fb.api('/me', function(response) {
        if (response && 'error' in response) {
          getMeDeferred.reject({error: response.error});
        } else {
          if ('email' in response) {
            getMeDeferred.resolve({
              email: response.email,
              id: response.id
            });
          } else {
            getMeDeferred.reject({error: 'No email'});
          }
        }
      });
    });
    return getMeDeferred.promise;
  };
  this.getPermissions = function() {
    var getPermissionsDefer = $q.defer();
    FacebookScriptLoader.attach().then(function(fb) {
      fb.api('/me/permissions', function(response) {
        if (response && 'error' in response) {
          getPermissionsDefer.reject({error: response.error});
        } else {
          getPermissionsDefer.resolve(response.data);
        }
      });
    });
    return getPermissionsDefer.promise;
  };
  this.getUserLikesPage = function(userId, pageId) {
    var likePageDeffered = $q.defer();
    FacebookScriptLoader.attach().then(function(fb) {
      fb.api(("/" + userId + "/likes/" + pageId), function(response) {
        if (response && 'error' in response) {
          likePageDeffered.reject({error: response.error});
        } else {
          $log.info(response);
        }
      });
    });
    return likePageDeffered.promise;
  };
  this.getLoginStatus = function() {
    var getLoginStatusDeferred = $q.defer();
    var connected = 'connected';
    FacebookScriptLoader.attach().then(function(fb) {
      fb.getLoginStatus(function(response) {
        if (response && 'error' in response) {
          getLoginStatusDeferred.reject({error: response.error});
        } else {
          if (response.status === connected) {
            getLoginStatusDeferred.resolve(response.authResponse);
          } else {
            getLoginStatusDeferred.reject({error: ("Status is " + response.status)});
          }
        }
      });
    });
    return getLoginStatusDeferred.promise;
  };
  this.share = function(options) {
    var shareDeferred = $q.defer();
    FacebookScriptLoader.attach().then(function(fb) {
      fb.ui({
        method: 'share',
        href: options.url
      }, function(response) {
        if (response && 'error' in response) {
          shareDeferred.reject({
            error: response.error,
            code: response.error_code
          });
        } else {
          shareDeferred.resolve(response);
        }
      });
    });
    return shareDeferred.promise;
  };
  this.logout = function() {
    var logoutDeferred = $q.defer();
    FacebookScriptLoader.attach().then(function(fb) {
      fb.logout(function(response) {
        if (response && 'error' in response) {
          logoutDeferred.reject({error: response.error});
        } else {
          $timeout(function() {
            logoutDeferred.resolve(response);
          });
        }
      });
    });
    return logoutDeferred.promise;
  };
  this.login = function() {
    var options = arguments[0] !== (void 0) ? arguments[0] : {};
    var loginDeferred = $q.defer();
    FacebookScriptLoader.attach().then(function(fb) {
      fb.login(function(response) {
        if (response && 'error' in response) {
          loginDeferred.reject({error: response.error});
        } else {
          if (response.authResponse) {
            loginDeferred.resolve(response.authResponse);
          } else {
            loginDeferred.reject({error: 'User cancelled login'});
          }
        }
      }, options);
    });
    return loginDeferred.promise;
  };
  this.getProfilePicture = function() {
    var type = arguments[0] !== (void 0) ? arguments[0] : 'large';
    var getProfilePictureDeferred = $q.defer();
    FacebookScriptLoader.attach().then(function(fb) {
      fb.api(("/me/picture?type=" + type), function(response) {
        if (response && 'error' in response) {
          getProfilePictureDeferred.reject({error: response.error});
        } else {
          if ('data' in response && 'is_silhouette' in response.data) {
            getProfilePictureDeferred.resolve(response.data);
          } else {
            getProfilePictureDeferred.reject({error: 'No picture'});
          }
        }
      });
    });
    return getProfilePictureDeferred.promise;
  };
}]);
facebookApp.factory('FacebookEmitter', ["$rootScope", function($rootScope) {
  var _createEventName = function(key) {
    return ("social.facebook." + key);
  };
  var FacebookEmitter = {
    broadcast: function(key, success, response) {
      $rootScope.$broadcast(_createEventName(key), {
        success: success,
        response: response
      });
    },
    get: function(key) {
      return _createEventName(key);
    }
  };
  return FacebookEmitter;
}]);
facebookApp.factory('FacebookScriptLoader', ["APP_ID", "$q", "$window", function(APP_ID, $q, $window) {
  var attachDeferred = $q.defer();
  var attached = false;
  var FacebookScriptLoader = {
    fb: null,
    attach: function() {
      if (attached) {
        return attachDeferred.promise;
      }
      if (!$window.FB) {
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = '//connect.facebook.net/en_US/sdk.js';
        document.body.appendChild(script);
      }
      attached = true;
      return attachDeferred.promise;
    },
    initialize: function() {
      FacebookScriptLoader.fb = $window.FB;
      FacebookScriptLoader.fb.init({
        appId: APP_ID,
        cookie: true,
        version: 'v2.0'
      });
      attachDeferred.resolve(FacebookScriptLoader.fb);
    }
  };
  $window.fbAsyncInit = FacebookScriptLoader.initialize;
  return FacebookScriptLoader;
}]);